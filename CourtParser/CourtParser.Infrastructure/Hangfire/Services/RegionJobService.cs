using CourtDecisions.Kafka.Abstraction;
using CourtDecisions.Kafka.Messages;
using CourtDecisions.Kafka.Options;
using CourtParser.Core.Interfaces;
using CourtParser.Infrastructure.Options;
using CourtParser.Infrastructure.Parsers;
using CourtParser.Models.Entities;
using CourtParser.Models.Regions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace CourtParser.Infrastructure.Hangfire.Services;

public class RegionJobService : IRegionJobService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<RegionJobService> _logger;
    private readonly KafkaOptions _kafkaConfig;
    private readonly WorkerOptions _workerOptions;

    public RegionJobService(
        IServiceProvider serviceProvider,
        ILogger<RegionJobService> logger,
        IOptions<KafkaOptions> kafkaConfig,
        IOptions<WorkerOptions> workerOptions)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
        _kafkaConfig = kafkaConfig.Value;
        _workerOptions = workerOptions.Value;
    }

    public async Task ProcessRegionAsync(string regionName)
    {
        _logger.LogInformation("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {Region}", regionName);

        using var scope = _serviceProvider.CreateScope();

        var kafkaProducer = scope.ServiceProvider.GetRequiredService<IKafkaProducer>();
        var parsers = scope.ServiceProvider.GetServices<IParser>().ToList();
        var courtParser = parsers.FirstOrDefault(p => p is CourtDecisionsParser);

        if (courtParser == null)
        {
            _logger.LogWarning("‚ùå {ParserName} –Ω–µ –Ω–∞–π–¥–µ–Ω", nameof(CourtDecisionsParser));
            return;
        }

        try
        {
            var federalDistrict = RussianRegions.GetFederalDistrictForRegion(regionName);
            _logger.LogInformation("üó∫Ô∏è –†–µ–≥–∏–æ–Ω {Region} –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {District}", regionName, federalDistrict);

            // –ü–∞—Ä—Å–∏–º –¥–µ–ª–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            var cases = await courtParser.ParseCasesAsync([regionName], 1);

            if (cases == null! || cases.Count == 0)
            {
                _logger.LogInformation("üì≠ –†–µ–≥–∏–æ–Ω {Region}: –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", regionName);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
            var messages = cases.Select(c => CreateCourtCaseMessage(c, federalDistrict)).ToList();
            await kafkaProducer.ProduceBatchAsync(_kafkaConfig.Topic, messages);

            _logger.LogInformation("‚úÖ –†–µ–≥–∏–æ–Ω {Region}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka {Count} –¥–µ–ª", regionName, messages.Count);

            PrintRegionResult(messages, regionName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏–æ–Ω–∞ {Region}", regionName);
            throw; // Hangfire –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∑–∞–¥–∞—á—É
        }
    }

    private CourtCaseMessage CreateCourtCaseMessage(CourtCase model, string federalDistrict)
    {
        return new CourtCaseMessage
        {
            Title = model.Title,
            Link = model.Link,
            CaseNumber = model.CaseNumber,
            CourtType = model.CourtType,
            Description = model.Description,
            Subject = model.Subject,
            Timestamp = DateTime.UtcNow,
            HasDecision = model.HasDecision,
            DecisionLink = model.DecisionLink,
            DecisionDate = model.DecisionDate,
            DecisionType = model.DecisionType,
            FederalDistrict = federalDistrict, 
            Region = model.Region,
            Plaintiff = model.Plaintiff,
            Defendant = model.Defendant,
            ReceivedDate = model.ReceivedDate,
            CaseCategory = model.CaseCategory,
            CaseSubcategory = model.CaseSubcategory,
            DecisionContent = model.DecisionContent,
            ThirdParties = model.ThirdParties,
            OriginalCaseLink = model.OriginalCaseLink
        };
    }

    private void PrintRegionResult(List<CourtCaseMessage> messages, string region)
    {
        if (messages.Count == 0)
        {
            Console.WriteLine($"‚ùå –†–µ–≥–∏–æ–Ω {region}: –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        Console.WriteLine($"\nüéØ –†–ï–ì–ò–û–ù: {region.ToUpper()}");
        Console.WriteLine($"üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {messages.Count}\n");

        var casesWithDecisions = messages.Count(m => m.HasDecision);
        var embeddedDecisions = messages.Count(m => m.HasDecision && m.DecisionLink.Contains("#embedded_decision"));
        var externalDecisions = messages.Count(m => m.HasDecision && m.DecisionLink.Contains("#embedded_decision") == false);

        Console.WriteLine($"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
        Console.WriteLine($"   ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–ª: {messages.Count}");
        Console.WriteLine($"   ‚Ä¢ –° —Ä–µ—à–µ–Ω–∏—è–º–∏: {casesWithDecisions}");
        Console.WriteLine($"   ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {embeddedDecisions}");
        Console.WriteLine($"   ‚Ä¢ –í–Ω–µ—à–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {externalDecisions}");
        Console.WriteLine();

        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–µ–ª—É
        for (var i = 0; i < messages.Count; i++)
        {
            var message = messages[i];
            Console.WriteLine($"üìã –î–µ–ª–æ #{i + 1}");
            Console.WriteLine($"   üèõÔ∏è  –°—É–¥: {message.CourtType}");
            Console.WriteLine($"   üî¢ –ù–æ–º–µ—Ä: {message.CaseNumber}");

            if (!string.IsNullOrEmpty(message.CaseCategory))
            {
                Console.WriteLine($"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.CaseCategory}");
            }

            if (message.ReceivedDate.HasValue)
            {
                Console.WriteLine($"   üìÖ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {message.ReceivedDate.Value:dd.MM.yyyy}");
            }

            if (!string.IsNullOrEmpty(message.Description))
            {
                Console.WriteLine($"   üìù {TruncateText(message.Description, 70)}");
            }

            if (!string.IsNullOrEmpty(message.Plaintiff))
            {
                Console.WriteLine($"   üë§ –ò—Å—Ç–µ—Ü: {TruncateText(message.Plaintiff, 60)}");
            }

            if (!string.IsNullOrEmpty(message.Defendant))
            {
                Console.WriteLine($"   ‚öñÔ∏è  –û—Ç–≤–µ—Ç—á–∏–∫: {TruncateText(message.Defendant, 60)}");
            }

            Console.WriteLine($"   ‚úÖ –†–µ—à–µ–Ω–∏–µ: {(message.HasDecision ? "–î–ê" : "–ù–ï–¢")}");

            if (message.HasDecision)
            {
                var decisionType = message.DecisionLink.Contains("#embedded_decision") 
                    ? "üìÑ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ" 
                    : "üìé –û—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç";
                
                Console.WriteLine($"   üíæ –¢–∏–ø: {decisionType}");
                
                if (message.DecisionDate.HasValue)
                {
                    Console.WriteLine($"   üìÖ –î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: {message.DecisionDate.Value:dd.MM.yyyy}");
                }
            }

            Console.WriteLine($"   üîó –°—Å—ã–ª–∫–∞: {message.Link}");

            if (i < messages.Count - 1)
            {
                Console.WriteLine("   " + "".PadRight(60, '‚îÄ'));
            }
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Console.WriteLine($"\nüìà –ò–¢–û–ì –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region}:");
        Console.WriteLine($"   ‚úÖ –î–µ–ª–∞ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏: {casesWithDecisions}/{messages.Count}");

        if (casesWithDecisions > 0)
        {
            var successRate = (double)casesWithDecisions / messages.Count * 100;
            Console.WriteLine($"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {successRate:F1}%");
        }

        Console.WriteLine("".PadRight(70, '‚ïê'));
    }

    /// <summary>
    /// –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    /// </summary>
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength - 3) + "...";
    }
}