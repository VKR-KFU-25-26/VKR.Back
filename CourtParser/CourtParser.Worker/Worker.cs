using System.Text.RegularExpressions;
using CourtDecisions.Kafka.Abstraction;
using CourtDecisions.Kafka.Messages;
using CourtDecisions.Kafka.Options;
using CourtParser.Core.Interfaces;
using CourtParser.Infrastructure.Parsers;
using Microsoft.Extensions.Options;

namespace CourtParser.Worker;

public class Worker : BackgroundService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<Worker> _logger;
    private readonly KafkaOptions _kafkaConfig;

    public Worker(IServiceProvider serviceProvider, ILogger<Worker> logger, IOptions<KafkaOptions> kafkaConfig)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
        _kafkaConfig = kafkaConfig.Value;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω");

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);

        var testRegions = new List<string>
        {
            "–ö–∞–ª–º—ã–∫–∏—è"
        };
        
        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                using var scope = _serviceProvider.CreateScope();

                var kafkaProducer = scope.ServiceProvider.GetRequiredService<IKafkaProducer>();
                
                // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–∞—Ä—Å–µ—Ä—ã
                var parsers = scope.ServiceProvider.GetServices<IParser>().ToList();
                
                _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {Count}", parsers.Count);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ CourtDecisionsParser
                var courtDecisionsParser = parsers.FirstOrDefault(p => p is CourtDecisionsParser);
                
                if (courtDecisionsParser != null)
                {
                    try
                    {
                        _logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: {ParserName}", nameof(CourtDecisionsParser));
                        
                        // –ü–µ—Ä–µ–¥–∞–µ–º cancellation token –≤ –ø–∞—Ä—Å–µ—Ä
                        var cases = await courtDecisionsParser.ParseCasesAsync(testRegions, 1);
                        
                        _logger.LogInformation("–ü–∞—Ä—Å–µ—Ä {ParserName} –Ω–∞—à–µ–ª {Count} –¥–µ–ª", 
                            nameof(CourtDecisionsParser), cases.Count);

                        if (cases.Count > 0)
                        {
                            var messages = cases.Select(c => new CourtCaseMessage
                            {
                                
                                Title = c.Title,
                                Link = c.Link,
                                CaseNumber = c.CaseNumber,
                                CourtType = c.CourtType,
                                Description = c.Description,
                                Subject = c.Subject,
                                Timestamp = DateTime.UtcNow,
                                HasDecision = c.HasDecision,
                                DecisionLink = c.DecisionLink,
                                DecisionDate = c.DecisionDate,
                                DecisionType = c.DecisionType,
                                FederalDistrict = c.FederalDistrict,
                                Region = c.Region,
                                Plaintiff = c.Plaintiff,
                                Defendant = c.Defendant,
                                ReceivedDate = c.ReceivedDate,
                                CaseCategory = c.CaseCategory,
                                CaseSubcategory = c.CaseSubcategory,
                                DecisionContent = c.DecisionContent
                            }).ToList();

                            await kafkaProducer.ProduceBatchAsync(_kafkaConfig.Topic, messages);
                            _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: {Count} –¥–µ–ª", messages.Count);
                            PrintResult(messages);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {ParserName}", nameof(CourtDecisionsParser));
                    }
                }
                else
                {
                    _logger.LogWarning("–ü–∞—Ä—Å–µ—Ä CourtDecisionsParser –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");
                }

                
                await WaitWithCancellation(TimeSpan.FromHours(1), stoppingToken);
            }
            catch (OperationCanceledException)
            {
                _logger.LogInformation("–†–∞–±–æ—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                break;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ worker");
                // –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã
                await WaitWithCancellation(TimeSpan.FromMinutes(5), stoppingToken);
            }
        }
        _logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    private async Task WaitWithCancellation(TimeSpan delay, CancellationToken stoppingToken)
    {
        try
        {
            await Task.Delay(delay, stoppingToken);
        }
        catch (TaskCanceledException)
        {
            _logger.LogInformation("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É");
            throw new OperationCanceledException();
        }
    }

    private void PrintResult(List<CourtCaseMessage> messages)
    {
        if (messages.Count == 0)
        {
            Console.WriteLine("‚ùå –î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        Console.WriteLine($"\nüéØ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {messages.Count}\n");
    
        var casesWithDecisions = messages.Count(m => m.HasDecision);
        var embeddedDecisions = messages.Count(m => m.HasDecision && m.DecisionLink?.Contains("#embedded_decision") == true);
        var externalDecisions = messages.Count(m => m.HasDecision && m.DecisionLink?.Contains("#embedded_decision") == false);

        Console.WriteLine($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        Console.WriteLine($"   ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–ª: {messages.Count}");
        Console.WriteLine($"   ‚Ä¢ –° —Ä–µ—à–µ–Ω–∏—è–º–∏: {casesWithDecisions}");
        Console.WriteLine($"   ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {embeddedDecisions}");
        Console.WriteLine($"   ‚Ä¢ –í–Ω–µ—à–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {externalDecisions}");
        Console.WriteLine();

        for (var i = 0; i < messages.Count; i++)
        {
            var message = messages[i];
            Console.WriteLine($"üìã –î–µ–ª–æ #{i + 1}");
            Console.WriteLine($"üèõÔ∏è  –°—É–¥: {message.CourtType}");
            Console.WriteLine($"üî¢ –ù–æ–º–µ—Ä –¥–µ–ª–∞: {message.CaseNumber}");
        
            if (!string.IsNullOrEmpty(message.FederalDistrict))
            {
                Console.WriteLine($"üó∫Ô∏è  –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥: {message.FederalDistrict}");
            }
        
            if (!string.IsNullOrEmpty(message.Region))
            {
                Console.WriteLine($"üìç –†–µ–≥–∏–æ–Ω: {message.Region}");
            }
        
            if (!string.IsNullOrEmpty(message.CaseCategory))
            {
                Console.WriteLine($"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.CaseCategory}");
            }
        
            if (!string.IsNullOrEmpty(message.CaseSubcategory))
            {
                Console.WriteLine($"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {message.CaseSubcategory}");
            }
        
            if (message.ReceivedDate.HasValue)
            {
                Console.WriteLine($"üì® –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {message.ReceivedDate.Value:dd.MM.yyyy}");
            }
        
            if (!string.IsNullOrEmpty(message.Description))
            {
                Console.WriteLine($"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {TruncateText(message.Description, 80)}");
            }
        
            if (!string.IsNullOrEmpty(message.Plaintiff))
            {
                Console.WriteLine($"üë§ –ò—Å—Ç–µ—Ü: {TruncateText(message.Plaintiff, 70)}");
            }
        
            if (!string.IsNullOrEmpty(message.Defendant))
            {
                Console.WriteLine($"‚öñÔ∏è  –û—Ç–≤–µ—Ç—á–∏–∫: {TruncateText(message.Defendant, 70)}");
            }
        
            if (!string.IsNullOrEmpty(message.Subject) && message.Subject.Length > 50)
            {
                Console.WriteLine($"üìÑ –ü—Ä–µ–¥–º–µ—Ç: {TruncateText(message.Subject, 80)}");
            }
        
            Console.WriteLine($"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–æ: {message.Link}");
    
            if (message.HasDecision)
            {
                var decisionIcon = message.DecisionLink?.Contains("#embedded_decision") == true ? "üìÑ" : "üìé";
            
                Console.WriteLine($"‚úÖ {decisionIcon} {message.DecisionType?.ToUpper()} –ù–ê–ô–î–ï–ù–û");
            
                if (message.DecisionDate.HasValue)
                {
                    Console.WriteLine($"üìÖ –î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: {message.DecisionDate.Value:dd.MM.yyyy}");
                }
            
                if (message.DecisionLink?.Contains("#embedded_decision") == true)
                {
                    Console.WriteLine($"üíæ –¢–∏–ø: –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ HTML");
                    Console.WriteLine($"üîó –°—Å—ã–ª–∫–∞: {message.Link} (—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)");
                
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                    if (!string.IsNullOrEmpty(message.DecisionContent))
                    {
                        var preview = GetDecisionPreview(message.DecisionContent);
                        Console.WriteLine($"üìã –ü—Ä–µ–≤—å—é —Ä–µ—à–µ–Ω–∏—è:");
                        Console.WriteLine($"   {preview}");
                    }
                }
                else
                {
                    Console.WriteLine($"üíæ –¢–∏–ø: –û—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç");
                    Console.WriteLine($"üîó –°–∫–∞—á–∞—Ç—å: {message.DecisionLink}");
                }
            }
            else
            {
                Console.WriteLine($"‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            
                if (!string.IsNullOrEmpty(message.DecisionType) && message.DecisionType != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                {
                    Console.WriteLine($"‚ÑπÔ∏è  –°—Ç–∞—Ç—É—Å: {message.DecisionType}");
                }
            }

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–µ–ª–∞–º–∏
            if (i < messages.Count - 1)
            {
                Console.WriteLine("".PadRight(80, '‚îÄ'));
            }
            else
            {
                Console.WriteLine("".PadRight(80, '‚ïê'));
            }
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Console.WriteLine($"\nüìà –ò–¢–û–ì:");
        Console.WriteLine($"   ‚úÖ –î–µ–ª–∞ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏: {casesWithDecisions}/{messages.Count}");
        Console.WriteLine($"   üìÑ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: {embeddedDecisions}");
        Console.WriteLine($"   üìé –û—Ç–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {externalDecisions}");
    
        if (casesWithDecisions > 0)
        {
            var successRate = (double)casesWithDecisions / messages.Count * 100;
            Console.WriteLine($"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {successRate:F1}%");
        }
    }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    /// <summary>
    /// –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    /// </summary>
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        
        return text.Substring(0, maxLength - 3) + "...";
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    /// </summary>
    private string GetDecisionPreview(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        var preview = content.Length > 100 
            ? content.Substring(0, 100) + "..." 
            : content;
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        preview = Regex.Replace(preview, @"\s+", " ").Trim();
    
        return preview;
    }
}