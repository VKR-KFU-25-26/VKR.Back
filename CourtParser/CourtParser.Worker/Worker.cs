using CourtDecisions.Kafka.Abstraction;
using CourtDecisions.Kafka.Messages;
using CourtDecisions.Kafka.Options;
using CourtParser.Core.Interfaces;
using CourtParser.Infrastructure.Parsers;
using Microsoft.Extensions.Options;

namespace CourtParser.Worker;

public class Worker : BackgroundService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<Worker> _logger;
    private readonly KafkaOptions _kafkaConfig;

    public Worker(IServiceProvider serviceProvider, ILogger<Worker> logger, IOptions<KafkaOptions> kafkaConfig)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
        _kafkaConfig = kafkaConfig.Value;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω");

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                using var scope = _serviceProvider.CreateScope();

                var kafkaProducer = scope.ServiceProvider.GetRequiredService<IKafkaProducer>();
                
                // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–∞—Ä—Å–µ—Ä—ã
                var parsers = scope.ServiceProvider.GetServices<IParser>().ToList();
                
                _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {Count}", parsers.Count);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ CourtDecisionsParser
                var courtDecisionsParser = parsers.FirstOrDefault(p => p is CourtDecisionsParser);
                
                if (courtDecisionsParser != null)
                {
                    try
                    {
                        _logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: {ParserName}", nameof(CourtDecisionsParser));
                        
                        // –ü–µ—Ä–µ–¥–∞–µ–º cancellation token –≤ –ø–∞—Ä—Å–µ—Ä
                        var cases = await courtDecisionsParser.ParseCasesAsync(1);
                        
                        _logger.LogInformation("–ü–∞—Ä—Å–µ—Ä {ParserName} –Ω–∞—à–µ–ª {Count} –¥–µ–ª", 
                            nameof(CourtDecisionsParser), cases.Count);

                        if (cases.Count > 0)
                        {
                            var messages = cases.Select(c => new CourtCaseMessage
                            {
                                Title = c.Title,
                                CaseNumber = c.CaseNumber,
                                Link = c.Link,
                                CourtType = c.CourtType,
                                Description = c.Description,
                                Subject = c.Subject,
                                Timestamp = DateTime.UtcNow
                            }).ToList();

                            await kafkaProducer.ProduceBatchAsync(_kafkaConfig.Topic, messages);
                            _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: {Count} –¥–µ–ª", messages.Count);
                            PrintResult(messages);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {ParserName}", nameof(CourtDecisionsParser));
                    }
                }
                else
                {
                    _logger.LogWarning("–ü–∞—Ä—Å–µ—Ä CourtDecisionsParser –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");
                }

                
                await WaitWithCancellation(TimeSpan.FromHours(1), stoppingToken);
            }
            catch (OperationCanceledException)
            {
                _logger.LogInformation("–†–∞–±–æ—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                break;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ worker");
                // –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã
                await WaitWithCancellation(TimeSpan.FromMinutes(5), stoppingToken);
            }
        }
        _logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    private async Task WaitWithCancellation(TimeSpan delay, CancellationToken stoppingToken)
    {
        try
        {
            await Task.Delay(delay, stoppingToken);
        }
        catch (TaskCanceledException)
        {
            _logger.LogInformation("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É");
            throw new OperationCanceledException();
        }
    }

    private void PrintResult(List<CourtCaseMessage> messages)
    {
        if (messages.Count == 0)
        {
            Console.WriteLine("‚ùå –î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        Console.WriteLine($"\nüéØ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {messages.Count}\n");
        
        for (var i = 0; i < 5; i++)
        {
            var message = messages[i];
            Console.WriteLine($"üìã –î–µ–ª–æ #{i + 1}");
            Console.WriteLine($"üèõÔ∏è  –°—É–¥: {message.CourtType}");
            Console.WriteLine($"üî¢ –ù–æ–º–µ—Ä –¥–µ–ª–∞: {message.CaseNumber}");
            Console.WriteLine($"üìù {message.Description}");
            Console.WriteLine($"üë• {message.Subject}");
            Console.WriteLine($"üîó –°—Å—ã–ª–∫–∞: {message.Link}");
            Console.WriteLine("‚îÄ".PadRight(60, '‚îÄ'));
        }
    }
}